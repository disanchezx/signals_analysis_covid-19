# -*- coding: utf-8 -*-
"""red neuronal con keras.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wtKS6UPx2lCx7yHFm1AN35JHvW-DglEK
"""

import numpy as np
import pandas as pd
from keras import models, layers, optimizers

# Data import
train_data = pd.read_csv('https://docs.google.com/spreadsheets/d/1-70X1HiDHcmXoBan0dQXNdJ8tbEweobD/export?format=csv', header = 0)
train_targets = pd.read_csv('https://docs.google.com/spreadsheets/d/1NUF620Pmuy2JoO5rdId8P4FS7Tzz_tT_/export?format=csv', header = 0)
test_data = pd.read_csv('https://docs.google.com/spreadsheets/d/1phPWLjWV7ULR6dmKR7PsneIKKdB5o22H/export?format=csv', header = 0)
test_targets = pd.read_csv('https://docs.google.com/spreadsheets/d/1wvPWIOzPqOU9TR4GdC8wrpnm6XvJaxOw/export?format=csv',header = 0)

# Data normalization
mean = train_data.mean(axis=0)
train_data = train_data  - mean
std = train_data.std(axis=0)
train_data = train_data / std

test_data = test_data - mean
test_data = test_data / std



def build_model_regression(input_data):
    model = models.Sequential()
    model.add(layers.Dense(64,activation='relu',input_shape=(input_data,)))
    model.add(layers.Dense(64,activation='relu'))
    model.add(layers.Dense(1))
    model.compile(optimizer='rmsprop', loss='mse',metrics=['mae'])
    return model

# K-fold validation
k = 4
num_val_samples = len(train_data) // 4
num_epoch = 80
all_history = []
valor = 2
(valor) * num_val_samples
(0+1)*num_val_samples

valor = 2
(valor) * num_val_samples

(0+1)*num_val_samples

for i in range(k):
    print("Fold " , i)
    val_data = train_data[i*num_val_samples: (i+1) * num_val_samples]   # Validation Sets
    val_targets = train_targets[i*num_val_samples: (i+1) * num_val_samples]
    
    partial_train_data = np.concatenate(
      [train_data[:i * num_val_samples],
      train_data[(i+1) * num_val_samples:]],
      axis= 0   
    )
     
    partial_train_targets = np.concatenate(
    [train_targets[:i * num_val_samples],
     train_targets[(i+1) * num_val_samples:]],
     axis= 0   
    )    
    model = build_model_regression(4)
    history = model.fit(partial_train_data, partial_train_targets, epochs=num_epoch, batch_size =16, 
                        validation_data = (val_data, val_targets),
                        verbose=0)
    all_history.append(history.history['val_mae'])

len(all_history[0])

# Mean Absolute Error
all_mae_avg = pd.DataFrame(all_history).mean(axis=0)
all_mae_avg

import matplotlib.pyplot as plt

fig = plt.figure(figsize=(5,5))
plt.plot(range(1,len(all_mae_avg[15::])+1), all_mae_avg[15:])
plt.show() # Mean absolute error

